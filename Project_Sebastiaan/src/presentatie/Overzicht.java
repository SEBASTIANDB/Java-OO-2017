/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentatie;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import javax.swing.ButtonGroup;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import logica.*;

/**
 *
 * @author Sebastiaan.debaedts
 * @version project
 */
public class Overzicht extends javax.swing.JFrame implements Filters {

    Curriculum curriculum = new Curriculum();
    ArrayList<Vak> displayNaFilter;//de arraylist die ik gebruik om na filteren te displayen op de textarea.
    ArrayList<Vak> displayNaFilterFase;// de arraylist die ik gebruik na de filtering van 

    Analyse analyse = new Analyse();

    public Overzicht() {
        initComponents();
        curriculum.toonVakkenElo(curriculum.getVakkenlijst());
        ButtonGroup bg = new ButtonGroup();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        overzichtJPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        overzichtTextArea = new javax.swing.JTextArea();
        fase1CheckBox = new javax.swing.JCheckBox();
        fase2CheckBox = new javax.swing.JCheckBox();
        fase3CheckBox = new javax.swing.JCheckBox();
        keuzeComboBox = new javax.swing.JComboBox<>();
        keuzeAfstudeer = new javax.swing.JComboBox<>();
        semester1CheckBox = new javax.swing.JCheckBox();
        semester2Checkbox = new javax.swing.JCheckBox();
        jLabelRichting = new javax.swing.JLabel();
        jLabelAf = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        analyseTextArea = new javax.swing.JTextArea();
        jLabelAnalyse = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        BeheerVensterBtn = new javax.swing.JButton();
        AnalyseBTN = new javax.swing.JButton();
        jErrorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        overzichtJPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        overzichtTextArea.setColumns(20);
        overzichtTextArea.setRows(5);
        jScrollPane2.setViewportView(overzichtTextArea);

        overzichtJPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 415, 403));

        fase1CheckBox.setText("Fase 1");
        fase1CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fase1CheckBoxActionPerformed(evt);
            }
        });
        overzichtJPanel1.add(fase1CheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(874, 15, -1, -1));

        fase2CheckBox.setText("Fase 2");
        fase2CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fase2CheckBoxActionPerformed(evt);
            }
        });
        overzichtJPanel1.add(fase2CheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(874, 41, -1, -1));

        fase3CheckBox.setText("Fase 3");
        fase3CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fase3CheckBoxActionPerformed(evt);
            }
        });
        overzichtJPanel1.add(fase3CheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(874, 67, -1, -1));

        keuzeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Onbepaald", "ELO", "ICT" }));
        keuzeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keuzeComboBoxActionPerformed(evt);
            }
        });
        overzichtJPanel1.add(keuzeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 10, 190, -1));

        keuzeAfstudeer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Afstudeerrichting", "ICT_WEB", "ICT_NET" }));
        keuzeAfstudeer.setEnabled(false);
        keuzeAfstudeer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keuzeAfstudeerActionPerformed(evt);
            }
        });
        overzichtJPanel1.add(keuzeAfstudeer, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 40, 190, -1));

        semester1CheckBox.setText("Semester 1");
        semester1CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semester1CheckBoxActionPerformed(evt);
            }
        });
        overzichtJPanel1.add(semester1CheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 110, -1, -1));

        semester2Checkbox.setText("Semester 2");
        semester2Checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semester2CheckboxActionPerformed(evt);
            }
        });
        overzichtJPanel1.add(semester2Checkbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 130, -1, -1));

        jLabelRichting.setText("Richting");
        overzichtJPanel1.add(jLabelRichting, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, 162, 23));

        jLabelAf.setText("Afstudeerrichting");
        overzichtJPanel1.add(jLabelAf, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 40, 162, 20));

        analyseTextArea.setColumns(20);
        analyseTextArea.setRows(5);
        jScrollPane4.setViewportView(analyseTextArea);

        overzichtJPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 150, 334, 312));

        jLabelAnalyse.setText("Analyse");
        overzichtJPanel1.add(jLabelAnalyse, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 120, 133, 23));

        errorLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 0, 51));
        overzichtJPanel1.add(errorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 437, 426, 25));

        BeheerVensterBtn.setText("Beheervenster");
        BeheerVensterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BeheerVensterBtnActionPerformed(evt);
            }
        });
        overzichtJPanel1.add(BeheerVensterBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 430, -1, -1));

        AnalyseBTN.setText("analyse");
        AnalyseBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalyseBTNActionPerformed(evt);
            }
        });
        overzichtJPanel1.add(AnalyseBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 400, 100, -1));

        jErrorLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 23, Short.MAX_VALUE)
                .addComponent(overzichtJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 23, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(279, 279, 279)
                .addComponent(jErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 55, Short.MAX_VALUE)
                .addComponent(overzichtJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void semester2CheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semester2CheckboxActionPerformed
        try {
            if (!((String) keuzeComboBox.getSelectedItem()).equals("Onbepaald") && ((String) keuzeAfstudeer.getSelectedItem()).equals("Afstudeerrichting")) {
                keuzeComboBoxActionPerformed(evt);
            } else {
                keuzeAfstudeerActionPerformed(evt);
            }
        } catch (Exception e) {
            jErrorLabel.setText(e + "");
        }

    }//GEN-LAST:event_semester2CheckboxActionPerformed

    private void semester1CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semester1CheckBoxActionPerformed
        try {
            if (!((String) keuzeComboBox.getSelectedItem()).equals("Onbepaald") && ((String) keuzeAfstudeer.getSelectedItem()).equals("Afstudeerrichting")) {
                keuzeComboBoxActionPerformed(evt);
            } else {
                keuzeAfstudeerActionPerformed(evt);
            }

        } catch (Exception e) {
            jErrorLabel.setText(e + "");
        }

    }//GEN-LAST:event_semester1CheckBoxActionPerformed

    private void keuzeAfstudeerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keuzeAfstudeerActionPerformed

        Analyse analyse = new Analyse();
        displayNaFilter = new ArrayList();
        displayNaFilterFase = new ArrayList();
        overzichtTextArea.setText("");
        analyseTextArea.setText("");
        switch ((String) keuzeAfstudeer.getSelectedItem()) {
            case "ICT_WEB":
                if (semester1CheckBox.isSelected()) {
                    overzichtTextArea.setText("");
                    displayNaFilter.addAll(filterSemester(curriculum.toonVakkenWeb(curriculum.getVakkenlijst()), "Sem1"));
                    analyse.setStudiegroepen(Studiegroep.ICT_WEB);
                    analyse.setSemesters("Sem1");
                }
                if (semester2Checkbox.isSelected()) {
                    overzichtTextArea.setText("");
                    displayNaFilter.addAll(filterSemester(curriculum.toonVakkenWeb(curriculum.getVakkenlijst()), "Sem2"));
                    analyse.setStudiegroepen(Studiegroep.ICT_WEB);
                    analyse.setSemesters("Sem2");
                }
                break;

            case "ICT_NET":
                if (semester1CheckBox.isSelected()) {
                    overzichtTextArea.setText("");
                    displayNaFilter.addAll(filterSemester(curriculum.toonVakkenInfrastructuur(curriculum.getVakkenlijst()), "Sem1"));
                    analyse.setStudiegroepen(Studiegroep.ICT_NET);
                    analyse.setSemesters("Sem1");
                }
                if (semester2Checkbox.isSelected()) {
                    overzichtTextArea.setText("");
                    displayNaFilter.addAll(filterSemester(curriculum.toonVakkenInfrastructuur(curriculum.getVakkenlijst()), "Sem2"));
                    analyse.setStudiegroepen(Studiegroep.ICT_NET);
                    analyse.setSemesters("Sem2");
                }
                break;

        }
        if (((String) keuzeAfstudeer.getSelectedItem()).equals("Afstudeerrichting") && keuzeComboBox.getSelectedItem().equals("Onbepaald")) {
            if (semester1CheckBox.isSelected()) {
                overzichtTextArea.setText("");
                displayNaFilter.addAll(filterSemester(curriculum.toonVakkenELOICT(curriculum.getVakkenlijst()), "Sem1"));
                analyse.setStudiegroepen(Studiegroep.ELOICT);
                analyse.setSemesters("Sem1");

            }
            if (semester2Checkbox.isSelected()) {
                overzichtTextArea.setText("");
                displayNaFilter.addAll(filterSemester(curriculum.toonVakkenELOICT(curriculum.getVakkenlijst()), "Sem2"));
                analyse.setStudiegroepen(Studiegroep.ELOICT);
                analyse.setSemesters("Sem2");

            }
        }

        pasFaseToe();//maakt toch nieuwe aan en append die(leeg)
        Collections.sort(displayNaFilterFase);
        for (Vak v : displayNaFilterFase) {
            overzichtTextArea.append(v.toString());
        }
        analyse.setVakkenLijst(displayNaFilterFase);


    }//GEN-LAST:event_keuzeAfstudeerActionPerformed

    private void keuzeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keuzeComboBoxActionPerformed

        Analyse analyse = new Analyse();
        displayNaFilter = new ArrayList();
        displayNaFilterFase = new ArrayList();
        overzichtTextArea.setText("");
        analyseTextArea.setText("");
        switch ((String) keuzeComboBox.getSelectedItem()) {
            case "ELO":
                keuzeAfstudeer.setEnabled(false);
                if (semester2Checkbox.isSelected()) {
                    overzichtTextArea.setText("");
                    displayNaFilter.addAll(filterSemester(curriculum.toonVakkenElo(curriculum.getVakkenlijst()), "Sem2"));
                    analyse.setStudiegroepen(Studiegroep.ELO);
                    analyse.setSemesters("Sem2");

                }
                if (semester1CheckBox.isSelected()) {
                    overzichtTextArea.setText("");
                    displayNaFilter.addAll(filterSemester(curriculum.toonVakkenElo(curriculum.getVakkenlijst()), "Sem1"));
                    analyse.setStudiegroepen(Studiegroep.ELO);
                    analyse.setSemesters("Sem1");
                }
                break;

            case "ICT":
                keuzeAfstudeer.setEnabled(true);
                if (semester2Checkbox.isSelected()) {
                    overzichtTextArea.setText("");
                    displayNaFilter.addAll(filterSemester(curriculum.toonVakkenIct(curriculum.getVakkenlijst()), "Sem2"));
                    analyse.setStudiegroepen(Studiegroep.ICT);
                    analyse.setSemesters("Sem2");
                }
                if (semester1CheckBox.isSelected()) {
                    overzichtTextArea.setText("");
                    displayNaFilter.addAll(filterSemester(curriculum.toonVakkenIct(curriculum.getVakkenlijst()), "Sem1"));
                    analyse.setStudiegroepen(Studiegroep.ICT);
                    analyse.setSemesters("Sem1");
                }
                break;
            default:
                if (semester2Checkbox.isSelected()) {
                    overzichtTextArea.setText("");
                    displayNaFilter.addAll(filterSemester(curriculum.toonVakkenELOICT(curriculum.getVakkenlijst()), "Sem2"));
                    analyse.setStudiegroepen(Studiegroep.ELOICT);
                    analyse.setSemesters("Sem2");
                }
                if (semester1CheckBox.isSelected()) {
                    overzichtTextArea.setText("");
                    displayNaFilter.addAll(filterSemester(curriculum.toonVakkenELOICT(curriculum.getVakkenlijst()), "Sem1"));
                    analyse.setStudiegroepen(Studiegroep.ELOICT);
                    analyse.setSemesters("Sem1");

                }
                break;

        }
        pasFaseToe();
        Collections.sort(displayNaFilterFase);
        for (Vak v : displayNaFilterFase) {
            overzichtTextArea.append(v.toString());
        }
        analyse.setVakkenLijst(displayNaFilterFase);


    }//GEN-LAST:event_keuzeComboBoxActionPerformed

    private void fase2CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fase2CheckBoxActionPerformed
        try {
            if (!((String) keuzeComboBox.getSelectedItem()).equals("Onbepaald") && ((String) keuzeAfstudeer.getSelectedItem()).equals("Afstudeerrichting")) {
                keuzeComboBoxActionPerformed(evt);
            } else {
                keuzeAfstudeerActionPerformed(evt);
            }
        } catch (Exception e) {
            jErrorLabel.setText(e + "");
        }

    }//GEN-LAST:event_fase2CheckBoxActionPerformed

    private void fase1CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fase1CheckBoxActionPerformed
        try {
            if (!((String) keuzeComboBox.getSelectedItem()).equals("Onbepaald") && ((String) keuzeAfstudeer.getSelectedItem()).equals("Afstudeerrichting")) {
                keuzeComboBoxActionPerformed(evt);
            } else {
                keuzeAfstudeerActionPerformed(evt);
            }
        } catch (Exception e) {
            jErrorLabel.setText(e + "");
        }

    }//GEN-LAST:event_fase1CheckBoxActionPerformed

    private void fase3CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fase3CheckBoxActionPerformed
        try {
            if (!((String) keuzeComboBox.getSelectedItem()).equals("Onbepaald") && ((String) keuzeAfstudeer.getSelectedItem()).equals("Afstudeerrichting")) {
                keuzeComboBoxActionPerformed(evt);
            } else {
                keuzeAfstudeerActionPerformed(evt);
            }
        } catch (Exception e) {
            jErrorLabel.setText(e + "");

        }

    }//GEN-LAST:event_fase3CheckBoxActionPerformed

    private void BeheerVensterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BeheerVensterBtnActionPerformed
        try {
            new Beheervenster().setVisible(true);
            this.dispose();

        } catch (Exception e) {
            errorLabel.setText(e + "");
        }

    }//GEN-LAST:event_BeheerVensterBtnActionPerformed

    private void AnalyseBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalyseBTNActionPerformed
        
        String[][] appendix = new String[16][4];

        for (int i = 0; i < 15; i++) {
            for (int j = 0; j < 3; j++) {
                appendix[i][j] = (analyse.printStudiepunten(displayNaFilterFase)[i][j]);//nullpointer??? (mss is niet elke setter gebruikt voor analyse)
                analyseTextArea.append(appendix[i][j]);
            }

        }
    }//GEN-LAST:event_AnalyseBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Overzicht.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Overzicht.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Overzicht.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Overzicht.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Overzicht().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnalyseBTN;
    private javax.swing.JButton BeheerVensterBtn;
    private javax.swing.JTextArea analyseTextArea;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JCheckBox fase1CheckBox;
    private javax.swing.JCheckBox fase2CheckBox;
    private javax.swing.JCheckBox fase3CheckBox;
    private javax.swing.JLabel jErrorLabel;
    private javax.swing.JLabel jLabelAf;
    private javax.swing.JLabel jLabelAnalyse;
    private javax.swing.JLabel jLabelRichting;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JComboBox<String> keuzeAfstudeer;
    private javax.swing.JComboBox<String> keuzeComboBox;
    private javax.swing.JPanel overzichtJPanel1;
    private javax.swing.JTextArea overzichtTextArea;
    private javax.swing.JCheckBox semester1CheckBox;
    private javax.swing.JCheckBox semester2Checkbox;
    // End of variables declaration//GEN-END:variables

    @Override
    public ArrayList<Vak> filterSemester(ArrayList<Vak> lijst, String semesters) {//neemt alle vakken uit een bepaald semester en steekt die in nieuw
        ArrayList<Vak> nieuw = new ArrayList();
        for (Vak vak : lijst) {
            if (vak.getSemester().equals(semesters)) {
                nieuw.add(vak);
                //als semester gelijk is, toevoegen

            }

        }

        return nieuw;
    }

    @Override
    public ArrayList<Vak> filterFase(ArrayList<Vak> lijst, String fase) {
        ArrayList<Vak> nieuw = new ArrayList();
        for (Vak vak : lijst) {
            if (vak.getFase().equals(fase)) {
                nieuw.add(vak);

            }

        }

        return nieuw;

    }

    @Override
    public void pasFaseToe() {//past de controle van de Fase checkboxes toe op de uiteindelijke selectie van vakken
        if (fase1CheckBox.isSelected()) {
            displayNaFilterFase.addAll(filterFase(displayNaFilter, "Fase1"));

        }
        if (fase2CheckBox.isSelected()) {
            displayNaFilterFase.addAll(filterFase(displayNaFilter, "Fase2"));

        }
        if (fase3CheckBox.isSelected()) {
            displayNaFilterFase.addAll(filterFase(displayNaFilter, "Fase3"));

        }

    }

}
